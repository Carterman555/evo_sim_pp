import pygame
from dna import DNA
import numpy as np
from helper import *
from enums import BoneSide

from booster import Booster
from mouth import Mouth

class Creature():
    def __init__(self, x, y, updatable):
        joint_x_positions = self.dna.joints[:, 0]
        joint_y_positions = self.dna.joints[:, 1]
        self.width = joint_x_positions.max() - joint_x_positions.min()
        self.height = joint_y_positions.max() - joint_y_positions.min()

        padding = 20
        self.offset = pygame.Vector2(padding/2, padding/2)

        self.pos = pygame.Vector2(x, y)
        self.vel = pygame.Vector2(0, 0)
        
        # Physics properties
        self.center_of_mass = (self.dna.joints.sum(axis=0) / len(self.dna.joints))
        self.center_of_mass += self.offset

        self.surface = pygame.Surface((self.width + padding, self.height + padding), pygame.SRCALPHA)
        self.draw_shapes()


    def draw(self, screen):
        # offset is center of mass relative to center instead of topleft
        offset = pygame.Vector2(self.width/2, self.height/2) - self.center_of_mass 
        rotated_surf, rect = rotate(self.surface, self.angle, self.pos, offset)
        screen.blit(rotated_surf, rect)

    def draw_shapes(self):
        #self.surface.fill((0,0,0,20)) # to visualize surface

        # bones
        for bone in self.dna.get_bone_positions():
            start_pos = bone[0]
            end_pos = bone[1]
            pygame.draw.line(self.surface, 'white', self.offset + start_pos, self.offset + end_pos, 3)
            
        # joints
        for joint in self.dna.joints:
            joint_pos = tuple(joint)
            pygame.draw.circle(self.surface, 'red', self.offset + joint_pos, radius=5)

        # boosters
        for booster in self.dna.boosters:
            booster.draw(self.surface)

        # mouths
        for mouth in self.dna.mouths:
            mouth.draw(self.surface)

        # Center of mass
        pygame.draw.circle(self.surface, 'black', self.center_of_mass, radius=3)


    def global_pos(self, local_pos):
        """Convert local position to global world position"""
        # Translate to origin (relative to center of mass)
        relative_pos = local_pos - self.center_of_mass

        # Rotate around origin
        cos_angle = np.cos(np.radians(self.angle))
        sin_angle = np.sin(np.radians(self.angle))
        
        rotated_x = relative_pos[0] * cos_angle - relative_pos[1] * sin_angle
        rotated_y = relative_pos[0] * sin_angle + relative_pos[1] * cos_angle
        
        # Translate back and add world position
        global_pos = pygame.Vector2(rotated_x, rotated_y) + self.pos
        
        return global_pos
